name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened, ready_for_review, labeled, unlabeled]

jobs:
  build:
    if: |
      !(github.event.pull_request.draft == true &&
        contains(join(github.event.pull_request.labels.*.name, ','), 'ci:skip'))
    name: Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ChargeUnity/backend

    steps:
      - uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven

      - name: Pre-fetch dependencies
        run: mvn dependency:go-offline

      - name: Build project
        run: mvn clean install -DskipTests

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: |
            ChargeUnity/backend/target/classes
            ChargeUnity/backend/target/*.jar

  functional-tests:
    runs-on: ubuntu-latest
    needs: build
    defaults:
      run:
        working-directory: ./ChargeUnity

    env:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: chargeunitydb
      MYSQL_USER: chargeunityuser
      MYSQL_PASSWORD: securepassword
      MYSQL_PORT: 3307:3306
      APP_PORT: 8080:8080
      DB_EMAIL: admin@example.com
      DB_PASSWORD: supersecret
      FRONTEND_PORT_VITE: 5173:5173
      VITE_APP_API_URL: http://localhost:8080
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Compile the backend
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
      
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      # Functional Tests Setup
      - name: Set up Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install docker-compose -y

      - name: Start containers
        run: |
          docker compose -f docker-compose.yml down --volumes --remove-orphans
          docker compose -f docker-compose.yml up -d --build

      - name: Wait for backend and frontend to be healthy
        run: |
          echo "Waiting for backend and frontend to be healthy..."
          for i in {1..30}; do
            backend_status=$(docker inspect --format='{{.State.Health.Status}}' $(docker compose ps -q backend) || echo "unavailable")
            frontend_status=$(docker inspect --format='{{.State.Health.Status}}' $(docker compose ps -q frontend) || echo "unavailable")

            echo "backend: $backend_status, frontend: $frontend_status"
            if [ "$backend_status" = "healthy" ] && [ "$frontend_status" = "healthy" ]; then
              echo "Services are healthy!"
              break
            fi
            sleep 5
          done

      - name: Wait for frontend to start
        run: |
          for i in {1..30}; do
            curl -sSf http://localhost:5173/driver && echo "Frontend ready" && exit 0
            echo "Waiting for frontend..."
            sleep 3
          done
          echo "Frontend failed to start"
          exit 1
      
      - name: check backend health
        run: |
          for i in {1..30}; do
            curl -sSf http://localhost:8080/api/v1/driver && echo "Backend ready" && exit 0
            echo "Waiting for backend..."
            sleep 3
          done
          echo "Backend failed to start"
          exit 1

      - name: Run functional tests
        run: mvn test
        working-directory: ./ChargeUnity/backend

      - name: Tear down
        if: always()
        run: docker compose -f docker-compose.yml down --volumes --remove-orphans