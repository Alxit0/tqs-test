name: CI Pipeline

on:
  push:
    branches:
      - test
  pull_request:
    branches:
      - test
    types: [opened, synchronize, reopened, ready_for_review, labeled, unlabeled]

jobs:
  functional-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./ChargeUnity

    services:
      docker:
        image: docker:20.10.16
        options: --privileged  # Needed for Docker-in-Docker
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock

    env:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: testdb
      MYSQL_USER: testuser
      MYSQL_PASSWORD: testpass
      MYSQL_PORT: 3306
      APP_PORT: 8080
      DB_EMAIL: test@example.com
      DB_PASSWORD: password123
      FRONTEND_PORT_VITE: 5173
      VITE_APP_API_URL: http://localhost:8080
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Build backend JAR
        run: ./mvnw clean package -DskipTests
        working-directory: ./ChargeUnity/backend

      - name: Set up Docker Compose
        run: |
          docker compose -f docker-compose.yml down --volumes --remove-orphans
          docker compose -f docker-compose.yml up -d --build

      - name: Wait for services to be healthy
        run: |
          echo "Waiting for backend and frontend to be healthy..."
          docker compose -f docker-compose.yml ps
          timeout 120 sh -c '
            until [ "$(docker inspect -f "{{.State.Health.Status}}" $(docker-compose ps -q backend))" = "healthy" ] &&
                  [ "$(docker inspect -f "{{.State.Health.Status}}" $(docker-compose ps -q frontend))" = "healthy" ]; do
              echo "Waiting for services..."
              sleep 5
            done
          '

      - name: Run Selenium Tests
        run: |
          ./mvnw verify -Dtest=FunctionalTest # or however you trigger your tests
        working-directory: ./backend  # adjust if test runner is elsewhere

      - name: Tear down
        if: always()
        run: docker compose -f docker-compose.yml down --volumes --remove-orphans